name: Build and Test DriveBox

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "Linting not configured"

    - name: Run unit tests
      run: npm test

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          test-results.xml
          coverage/
        retention-days: 30

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Package application
      run: npm run dist

    - name: Sign Windows executable (Windows only)
      if: matrix.os == 'windows-latest' && github.event_name == 'release'
      shell: powershell
      run: |
        # Create self-signed certificate for code signing
        $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=DriveBox" -KeyUsage DigitalSignature -KeyLength 2048 -NotAfter (Get-Date).AddYears(3)
        $password = ConvertTo-SecureString -String "${{ secrets.CERT_PASSWORD }}" -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath "codesign.pfx" -Password $password
        
        # Sign the executable
        $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
        if (Test-Path $signtool) {
          & $signtool sign /f "codesign.pfx" /p "${{ secrets.CERT_PASSWORD }}" /t http://timestamp.digicert.com "dist\*.exe"
        }

    - name: Generate file hashes
      shell: bash
      run: |
        cd dist
        if command -v sha256sum &> /dev/null; then
          sha256sum * > SHA256SUMS
        elif command -v shasum &> /dev/null; then
          shasum -a 256 * > SHA256SUMS
        elif command -v certutil &> /dev/null; then
          for file in *; do
            if [ -f "$file" ]; then
              certutil -hashfile "$file" SHA256 >> SHA256SUMS
            fi
          done
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drivebox-${{ matrix.os }}
        path: |
          dist/
          SHA256SUMS
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-results
        path: snyk-results.json

  virus-scan:
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: drivebox-windows-latest
        path: ./dist

    - name: Submit to VirusTotal
      shell: powershell
      run: |
        $apiKey = "${{ secrets.VIRUSTOTAL_API_KEY }}"
        if ($apiKey) {
          $files = Get-ChildItem -Path "./dist" -File -Filter "*.exe"
          foreach ($file in $files) {
            $boundary = [System.Guid]::NewGuid().ToString()
            $bodyLines = @(
              "--$boundary",
              'Content-Disposition: form-data; name="apikey"',
              '',
              $apiKey,
              "--$boundary",
              "Content-Disposition: form-data; name=`"file`"; filename=`"$($file.Name)`"",
              'Content-Type: application/octet-stream',
              '',
              [System.IO.File]::ReadAllBytes($file.FullName),
              "--$boundary--"
            )
            
            $body = $bodyLines -join "`r`n"
            
            try {
              $response = Invoke-RestMethod -Uri "https://www.virustotal.com/vtapi/v2/file/scan" -Method Post -Body $body -ContentType "multipart/form-data; boundary=$boundary"
              Write-Host "VirusTotal scan initiated for $($file.Name): $($response.permalink)"
            } catch {
              Write-Warning "Failed to submit $($file.Name) to VirusTotal: $($_.Exception.Message)"
            }
          }
        } else {
          Write-Host "VirusTotal API key not configured, skipping scan"
        }

  release:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release notes
      run: |
        echo "# DriveBox Release ${{ github.event.release.tag_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "## Changes" >> release-notes.md
        echo "${{ github.event.release.body }}" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Security" >> release-notes.md
        echo "- All builds have been security scanned" >> release-notes.md
        echo "- File integrity hashes are provided (SHA256SUMS)" >> release-notes.md
        echo "- Windows executable is code signed" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "1. Download the appropriate file for your operating system" >> release-notes.md
        echo "2. Verify the file hash against SHA256SUMS" >> release-notes.md
        echo "3. Run the installer/executable" >> release-notes.md

    - name: Update release with artifacts
      uses: softprops/action-gh-release@v1
      with:
        files: |
          drivebox-windows-latest/*
          drivebox-macos-latest/*
          drivebox-ubuntu-latest/*
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.event.release.tag_name, 'beta') || contains(github.event.release.tag_name, 'alpha') }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.build.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        echo "Build: ${{ needs.build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Some checks failed:"
        echo "Build: ${{ needs.build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        exit 1
